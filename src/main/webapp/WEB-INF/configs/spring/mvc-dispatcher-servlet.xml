<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- 本配置文件是供名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->

	<!-- 1、启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。
	 激活 @Required @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
	<context:annotation-config />

	<!-- 2、DispatcherServlet扫描范围     也就是DispatcherServlet上下文，这里设置只管理@Controller类型的bean， 忽略其他型的bean, 忽略如@Service
	也就是这里的配置说明通过spring mvc只管理ontroller，而service是由spring来管理-->
	<context:component-scan base-package="com.imooc.mvcdemo">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 3、HandlerMapping, 无需配置， Spring MVC有很强大的HandlerMapping功能，是默认启动的：DefaultAnnotationHandlerMapping
		annotation-driven HandlerMapping -->
	<!-- 4、扩充了注解驱动，可以将请求参数绑定到控制器参数
	也就是URL中的查询参数的某一个变量，可以直接映射到Controller中某个方法的参数（这个功能很强大、实际使用很广泛）-->
	<mvc:annotation-driven />

	<!-- 5、获取静态资源， css， js， imgs ，这里的配置是将resources映射到resources-->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<!-- 6、配置ViewResolver，可以配合多个ViewResolver，多个ViewResolver使用order属性排序。 InternalResourceViewResolver放在最后。因为：请求必定会返回一个对象，这个对象可能不是我们想要的，所以使用InternalResourceViewResolver进行兜底 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
				<entry key="htm" value="text/html" />
			</map>
		</property>

		<property name="defaultViews">
			<list>
				<!-- JSON View ：这里的配置实现将模型数据通过jackson工具转换成JSON格式，同时需要项目引入jackson依赖-->
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
				</bean>
			</list>
		</property>
		<property name="ignoreAcceptHeader" value="true" />
	</bean>

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/jsps/" /><!--存放JSP文件夹-->
		<property name="suffix" value=".jsp" />
	</bean>


	<!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="209715200" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="resolveLazily" value="true" />
	</bean>

</beans>